apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'maven'
apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "application"

sourceCompatibility = 1.8
version = '0.0.1'

ext {
    lwjglVersion = "2.9.0"
    dirNatives = 'natives'
    // Read environment variables, including variables passed by jenkins continuous integration server
    env = System.getenv()
}
mainClassName = 'game.engine.Game'

project.buildDir = 'bin'

repositories {
    mavenCentral()
    maven {
      url 'https://clojars.org/repo/'
    }
    maven {
        url 'https://repo1.maven.org/maven2/'
    }
}

run {
    println System.properties['java.library.path']
    systemProperty 'java.library.path', file('bin/natives')
}


/*configurations {
    natives
}*/

dependencies {
    compile files('lib//msdkogl.jar')
    compile group: 'kephale', name: 'slick-util', version: '1.0.1'
    compile group: 'com.google.guava', name: 'guava', version: '14.0.1'
    compile "org.lwjgl.lwjgl:lwjgl_util:${lwjglVersion}"
    compile "org.lwjgl.lwjgl:lwjgl:${lwjglVersion}"
}

jar {
    /*into 'res', {
        from 'res'
    }*/
    manifest {
        def manifestClasspath = configurations.runtime.collect { it.getName() }.join(" ")
        attributes 'Main-Class': mainClassName
        attributes("Class-Path": manifestClasspath)
        attributes("Implementation-Version": env.BUILD_NUMBER + ", " + env.GIT_BRANCH + ", " + env.BUILD_ID)
    }
}

def listNativePaths() {
    ArrayList<Object> paths = new ArrayList<>();
    configurations.compile.each { file ->
        if (file.name.contains("natives")) {
            zipTree(file).matching {
                exclude {
                    it.path.contains('META-INF')
                }
            }.each {
                paths.add(it)
            }
        }
    }
    return paths
}

task natives(type: Sync) {
    from listNativePaths()
    into "$buildDir/natives"
}

task assembler(dependsOn: [
        natives
])

/*task extractWindowsNatives(type: Sync) {
    description = "Extract the Windows natives from the downloaded zip"
    from {
        configurations.natives.collect { it.getName().contains('-natives-window') ? zipTree(it) : [] }
    }
    into("${dirNatives}/windows")
    exclude('META-INF/**')
}

task extractMacOSNatives(type: Sync) {
    description = "Extracts the macOS natives from the downloaded zip"
    from {
        configurations.natives.collect { it.getName().contains('-natives-osx') ? zipTree(it) : [] }
    }
    into("${dirNatives}/macosx")
    exclude('META-INF/**')
}

task extractLinuxNatives(type: Sync) {
    description = "Extracts the Linux natives from the downloaded zip"

    description = "Extracts the Linux natives from the downloaded zip"
    from {
        configurations.natives.collect { it.getName().contains('-natives-linux') ? zipTree(it) : [] }
    }
    into("${dirNatives}/linux")
    exclude('META-INF/**')
}

task extractNatives {
    description = "Extracts all the natives lwjgl libraries from the downloaded zip"
    dependsOn extractLinuxNatives
    dependsOn extractMacOSNatives
    dependsOn extractWindowsNatives
}*/

sourceSets {
    main {
        java {
            srcDir "src"
        }
        resources {
            srcDir "res"
        }
        output.resourcesDir = "${project.buildDir}/res"
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}


// java -jar 
// jar xf
build.dependsOn assembler
run.dependsOn jacocoTestReport